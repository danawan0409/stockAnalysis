CREATE TABLE "User" (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password TEXT NOT NULL
);

CREATE TABLE Portfolio (
    name VARCHAR(50) NOT NULL,
    cashAccount NUMERIC(15, 2) DEFAULT 0,
    ownerID INTEGER NOT NULL,
    PRIMARY KEY (name, ownerID),
    FOREIGN KEY (ownerID) REFERENCES "User"(id) ON DELETE CASCADE
);

CREATE TABLE StockList (
    visibility VARCHAR(10) CHECK (visibility IN ('public', 'shared', 'private')) DEFAULT 'private',
    name VARCHAR(100) NOT NULL,
    ownerID INTEGER NOT NULL,
    PRIMARY KEY (name, ownerID),
    FOREIGN KEY (ownerID) REFERENCES "User"(id) ON DELETE CASCADE
);

CREATE TABLE Stock (
    symbol VARCHAR(10) PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE StockHistory (
    symbol VARCHAR(10),
    timestamp DATE,
    open NUMERIC(10, 2),
    close NUMERIC(10, 2),
    high NUMERIC(10, 2),
    low NUMERIC(10, 2),
    volume BIGINT,
    PRIMARY KEY (symbol, timestamp)
);

COPY StockHistory(
    timestamp, 
    open, 
    high,
    low, 
    close, 
    volume, 
    symbol) FROM '/data/SP500History.csv' DELIMITER ','
CSV HEADER;


CREATE TABLE Review (
    writerID INTEGER,
    ownerID INTEGER, 
    stockListName VARCHAR(100) NOT NULL,
    content TEXT CHECK (char_length(content) <= 4000),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (writerID, ownerID, stockListName),
    FOREIGN KEY (writerID) REFERENCES "User"(id) ON DELETE CASCADE,
    FOREIGN KEY (stockListName, ownerID) REFERENCES StockList(name, ownerID) ON DELETE CASCADE
);

CREATE TABLE Friends (
    senderID INTEGER,
    receiverID INTEGER,
    accepted BOOLEAN DEFAULT FALSE,
    requestTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (senderID, receiverID),
    FOREIGN KEY (senderID) REFERENCES "User"(id) ON DELETE CASCADE,
    FOREIGN KEY (receiverID) REFERENCES "User"(id) ON DELETE CASCADE
);

/* I remove HasStockList and HasPortfolio Tables because the owner can be very easily found
   (i.e., ownerId is stored in StockList and Portfolio).
   Maybe redundant? */

CREATE TABLE ShareStockList (
    ownerID INTEGER,
    receiverID INTEGER,
    stockListName VARCHAR(100) NOT NULL,
    PRIMARY KEY (ownerID, receiverID, stockListName),
    FOREIGN KEY (stockListName, ownerID) REFERENCES StockList(name, ownerID) ON DELETE CASCADE,
    FOREIGN KEY (receiverID) REFERENCES "User"(id) ON DELETE CASCADE
);

CREATE TABLE StockListHasStock (
    ownerID INTEGER,
    stockListName VARCHAR(100) NOT NULL,
    stockID VARCHAR(10),
    quantity INTEGER NOT NULL,
    PRIMARY KEY (stockListName, ownerID, stockID),
    FOREIGN KEY (stockListName, ownerID) REFERENCES StockList(name, ownerID) ON DELETE CASCADE,
    FOREIGN KEY (stockID) REFERENCES Stock(symbol) ON DELETE CASCADE
);

CREATE TABLE PortfolioHasStock (
    portfolioName VARCHAR(50) NOT NULL,
    ownerID INTEGER NOT NULL,
    stockID VARCHAR(10),
    purchaseDate DATE,
    purchasePrice NUMERIC(10, 2),
    quantity INTEGER,
    sold BOOLEAN DEFAULT FALSE,
    sellDate DATE,
    sellPrice NUMERIC(10, 2),
    PRIMARY KEY (portfolioName, ownerID, stockID, purchaseDate),
    FOREIGN KEY (portfolioName, ownerID) REFERENCES Portfolio(name, ownerID) ON DELETE CASCADE,
    FOREIGN KEY (stockID) REFERENCES Stock(symbol) ON DELETE CASCADE
);

CREATE TABLE PredictStockPrice (
    symbol VARCHAR(10),
    predictedDate DATE,
    predictedPrice NUMERIC(10, 2),
    PRIMARY KEY (symbol, predictedDate),
    FOREIGN KEY (symbol) REFERENCES Stock(symbol) ON DELETE CASCADE
)

CREATE OR REPLACE FUNCTION check_friendship()
RETURNS TRIGGER AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM Friends
        WHERE
            accepted = TRUE AND (
                (senderID = NEW.ownerID AND receiverID = NEW.receiverID) OR
                (senderID = NEW.receiverID AND receiverID = NEW.ownerID)
            )
    ) THEN
        RAISE EXCEPTION 'Users % and % are not friends.', NEW.ownerID, NEW.receiverID;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_check_friendship
BEFORE INSERT OR UPDATE ON ShareStockList
FOR EACH ROW
EXECUTE FUNCTION check_friendship();
